version: 2
jobs:
  build:
    docker:
    - image: golang:1
    - image: neo4j:3.4.10-enterprise
      environment:
        NEO4J_AUTH: none
        NEO4J_HEAP_MEMORY: 256
        NEO4J_CACHE_MEMORY: 256M
        NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"

    working_directory: /go/src/github.com/Financial-Times/content-rw-neo4j
    environment:
      CIRCLE_TEST_REPORTS: /tmp/test-reports
      CIRCLE_COVERAGE_REPORT: /tmp/coverage-results
      CIRCLE_ARTIFACTS: /tmp/artifacts
      NEO4J_TEST_URL: "http://localhost:7474/db/data/"

    steps:
    - checkout
    - run:
        name: External dependencies
        command: |
          go get -u github.com/mattn/goveralls
          go get -u github.com/jstemmer/go-junit-report
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    - run:
        name: Make result folders
        command: |
          mkdir -p ${CIRCLE_TEST_REPORTS}
          mkdir -p ${CIRCLE_COVERAGE_REPORT}
          mkdir -p ${CIRCLE_ARTIFACTS}
    - run:
        name: Download vendored dependencies
        command: dep ensure -v -vendor-only
    - run:
        name: Go build
        command: go build -v
    - run:
        name: Run tests
        command: go test -race -cover -coverprofile=${CIRCLE_COVERAGE_REPORT}/coverage.out ./... | go-junit-report > ${CIRCLE_TEST_REPORTS}/junit.xml
    - run:
        name: Upload coverage
        command: goveralls -coverprofile=${CIRCLE_COVERAGE_REPORT}/coverage.out -service=circle-ci -repotoken=${COVERALLS_TOKEN}

    - store_artifacts:
        path: /tmp/artifacts
        destination: build

  docker_build:
    working_directory: /content-rw-neo4j
    docker:
    - image: docker:18.03
    steps:
    - checkout
    - setup_docker_engine
    - run:
        name: Build Dockerfile
        command: docker build .

  dredd:
    working_directory: /go/src/github.com/Financial-Times/content-rw-neo4j
    docker:
    - image: bankrs/golang-dredd:go1.8.3-dredd4.4.0
      environment:
        GOPATH: /go
        NEO4J_TEST_URL: "http://localhost:7474/db/data/"
    - image: neo4j:3.2.2-enterprise
      environment:
        NEO4J_AUTH: none
        NEO4J_HEAP_MEMORY: 256
        NEO4J_CACHE_MEMORY: 256M
    environment:
    steps:
    - checkout
    - run:
        name: External Dependencies
        command: |
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    - run:
        name: Go Dep
        command: dep ensure -v -vendor-only
    - run:
        name: Go Build
        command: go build -v
    - run:
        name: Download dredd
        command: |
            curl -sL https://deb.nodesource.com/setup_11.x | bash -
            DEBIAN_FRONTEND=noninteractive apt-get install -y nodejs=11.\*
            npm install -g --unsafe-perm --loglevel warn --user 0 --no-progress dredd@8.0.0
            rm -rf /var/lib/apt/lists/*       
    - run:
        name: Dredd API Testing
        command: dredd

workflows:
  version: 2
  tests_and_docker:
    jobs:
    - build
    - dredd
    - docker_build:
        requires:
        - build
